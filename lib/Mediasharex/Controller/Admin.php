<?php
/**
 * Mediasharex
 */

/**
 * Administrator-initiated actions for the Mediasharex module.
 */
class Mediasharex_Controller_Admin extends Zikula_AbstractController
{
    /**
     */
    public function main()
    {
        $this->redirect(ModUtil::url($this->name, 'admin', 'info'));
    }
	
	
    /**
     */
    public function info()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
		$this->view->assign('modulevars', $modulevars);
		
		$dir_check['mediaDirName']['writable'] = ModUtil::apiFunc('Mediasharex', 'admin', 'mediashareDirIsWritable',$modulevars['mediaDirName']);
		$dir_check['tmpDirName']['writable']   = ModUtil::apiFunc('Mediasharex', 'admin', 'mediashareDirIsWritable',$modulevars['tmpDirName']);		
        $this->view->assign('dir_check', $dir_check);

		$moduleinfo = ModUtil::getInfoFromName('Mediasharex');
		$this->view->assign('moduleinfo',$moduleinfo);


		//Get albums		
		$albumsManager = new Mediasharex_Manager_Albums();
		$albums = $albumsManager->getCount();
		$this->view->assign('albums',$albums);
		//Get media		
		$mediaManager = new Mediasharex_Manager_MediaItems();
		$media = $mediaManager->getCount();
		$this->view->assign('media',$media);
		//Get handlers		
		$handlersManager = new Mediasharex_Manager_MediaHandlers();
		$mediahandlers = $handlersManager->getCount();
		$this->view->assign('mediahandlers',$mediahandlers);
		//Get sources		
		$sourcesManager = new Mediasharex_Manager_MediaSources();
		$sources = $sourcesManager->getCount();		
		$this->view->assign('sources',$sources);
		
        // Assign all the module vars
        return $this->view->fetch('admin/info.tpl');
    }	


    /**
      */
    public function mainsettings()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');

		$dir_check['mediaDirName']['writable'] = ModUtil::apiFunc('Mediasharex', 'admin', 'mediashareDirIsWritable',$modulevars['mediaDirName']);
		$dir_check['tmpDirName']['writable']   = ModUtil::apiFunc('Mediasharex', 'admin', 'mediashareDirIsWritable',$modulevars['tmpDirName']);		
        $this->view->assign('dir_check', $dir_check);				
        // Assign all the module vars
        return $this->view->assign('modulevars', $modulevars)
            			  ->fetch('admin/mainsettings.tpl');
    }

    /**
   */
    public function updatemainsettings()
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }

        // Confirm the forms authorisation key
        $this->checkCsrfToken();

		$modulevars = $this->request->getPost()->get('modulevars');

		if (is_array($modulevars)){
		foreach ($modulevars as $optionname => $value) {
			 if ($optionname !== 'activate'){	
			 $this->setVar($optionname, $value);	
			 }
		 }				
		}				
		
        // the module configuration has been updated successfuly
        $this->registerStatus($this->__('Done! Saved module configuration.'));

        // This function generated no output, and so now it is complete we redirect
        // the user to an appropriate page for them to carry on their work
        $this->redirect(ModUtil::url($this->name, 'admin', 'main'));
    }

    /**
   */
    public function managealbums()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : 1);


		//Get albums		
		$albums = new Mediasharex_Manager_Albums();
		$albums->setPage($page);		
		$albums->setOrderby('parentalbum','ASC');
		$albums_array = $albums->getAll();
		$pager = $albums->getPager();		
		
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('albums',$albums_array)
						  ->assign('pager',$pager)		
            			  ->fetch('admin/managealbums.tpl');
    }
	
	    /**
     */
	public function modify_album($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("user/modify_album.tpl", new Mediasharex_Handler_ModifyAlbum());
    
	}

    /**
     */
    public function manageitems()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : 1);	
		
		$MediaItems = new Mediasharex_Manager_MediaItems();
		$MediaItems->setPage($page);		
		$MediaItems->setOrderby('parentalbum','ASC');
		$mediaitems_array = $MediaItems->getAll();
		$pager = $MediaItems->getPager();		
		
		//$new_item2 = $itemManager->getItem();		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('items',$mediaitems_array)
						  ->assign('pager',$pager)	
            			  ->fetch('admin/manageitems.tpl');
    }
    /**
     */
	public function modify_media($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("user/modify_mediaitem.tpl", new Mediasharex_Handler_ModifyMediaItem());
    
	}
    /**
    */
    public function managemediastore()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }

        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : 1);


		$MediaStore = new Mediasharex_Manager_MediaStore();
		$MediaStore->setPage($page);
		$MediaStore->setOrderby('id','ASC');
		$MediaStore_array = $MediaStore->getAll();
		$pager = $MediaStore->getPager();				
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('mediastore',$MediaStore_array)
						  ->assign('pager',$pager)
            			  ->fetch('admin/managemediastore.tpl');
    }	
	/**
    */
	public function modify_storeitem($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("admin/modify_storeitem.tpl", new Mediasharex_Handler_ModifyStoreItem());
    
	}
	
    /**
    */
    public function managehandlers()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : 1);		
		
		$mediaHandlers = new Mediasharex_Manager_MediaHandlers();
		$mediaHandlers->setPage($page);
		$mediaHandlers->setOrderby('id','ASC');
		$mediaHandlers_array = $mediaHandlers->getAll();
		$pager = $mediaHandlers->getPager();		
		
		$files = $mediaHandlers->getHandlersDir();
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('mediaHandlers',$mediaHandlers_array)
						  ->assign('pager',$pager)
						  ->assign('files',$files)			
            			  ->fetch('admin/managehandlers.tpl');
    }
	
	    /**
     */
	public function modify_handler($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("admin/modify_handler.tpl", new Mediasharex_Handler_ModifyHandler());
    
	}	


    /**
    */
    public function reloadhandlers()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
		
		$mediaHandlers = new Mediasharex_Manager_MediaHandlers();				
		$status = $mediaHandlers->reloadHandlers();
				
		if ($status) {			
        $this->registerStatus($this->__('Done database is actual now.'));				
		}else{			
        // the module configuration has been updated successfuly
        $this->registerError($this->__('Something went wrong check handlers storage.'));			
		}				
				
						
        // Assign all the module vars
        return $this->managehandlers();
    }
	
	    /**
      */
    public function managesources()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
        
        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : -1);		
		
		
		$mediaSources = new Mediasharex_Manager_MediaSources();
		$mediaSources->setPage($page);
		$mediaSources->setOrderby('id','ASC');
		$mediaSources_array = $mediaSources->getAll();
		$pager = $mediaSources->getPager();		
		
		$files = $mediaSources->getSourcesDir();
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('mediaSources',$mediaSources_array)
						  ->assign('pager',$pager)	
						  ->assign('files',$files)							  	
            			  ->fetch('admin/managesources.tpl');
    }

	    /**
     */
	public function modify_source($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("admin/modify_source.tpl", new Mediasharex_Handler_ModifySource());
    
	}

    /**
     */
    public function reloadsources()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
		
		$mediaSources = new Mediasharex_Manager_MediaSources();				
		$status = $mediaSources->reloadSources();
				
		if ($status) {			
        $this->registerStatus($this->__('Done database is actual now.'));				
		}else{			
        // the module configuration has been updated successfuly
        $this->registerError($this->__('Something went wrong check sources storage.'));			
		}				
				
						
        // Assign all the module vars
        return $this->managesources();
    }

	    /**
     */
    public function manageinvitations()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
        
        $page   = $this->request->query->get('page',  isset($args['page']) ? $args['page'] : 1);		
		
		
		$Invitations = new Mediasharex_Manager_Invitations();
		$Invitations->setPage($page);
		$Invitations->setOrderby('id','ASC');
		$Invitations_array = $Invitations->getAll();
		$pager = $Invitations->getPager();		
		
		
		//Get users module settings
		$modulevars = ModUtil::getVar('Mediasharex');
				
        // Assign all the module vars
        return $this->view->assign('Invitations',$Invitations_array)
						  ->assign('pager',$pager)		
            			  ->fetch('admin/manageinvitations.tpl');
    }	



	    /**
    */
	public function modify_invitation($args)
    {		
        // Create Form output object
        $render = FormUtil::newForm('Mediasharex', $this);

        // Return the output that has been generated by this function
        return $render->execute("admin/modify_invitation.tpl", new Mediasharex_Handler_ModifyInvitation());
    
	}	
	    /**
     */
    public function import()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Mediasharex::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
		
		
		//Get users module settings
		$enableimporttables = ModUtil::getVar('Mediasharex','enableimporttables',false);			
		

		
		
		
		$oldversion = ModUtil::apiFunc('Mediasharex', 'import', 'findMediashareModule');
        if ($oldversion){
        $mediashare_tables = ModUtil::apiFunc('Mediasharex', 'import', 'tablesPerVersion',$oldversion['version']);
		}
		
		$tables = DBUtil::getTables();

		//$mxctables = ModUtil::apiFunc('Mediasharex', 'import', 'getMediasharexTablesNames');

				
        // Assign all the module vars
        return $this->view->assign($modulevars)
						  ->assign('foundmediashare',$oldversion)
						  ->assign('enableimporttables',$enableimporttables)						  
						  ->assign('compat_tables',ModUtil::apiFunc('Mediasharex', 'import', 'MatchCompatibititeTables'))						  
            			  ->fetch('admin/import.tpl');
    }


	    /**
    */
    public function importenabletables()
    {
		$enabletablesmode = $this->request->getPost()->get('enableimporttables', false);
		$this->setVar('enableimporttables', $enabletablesmode);	
        return $this->import();	
		
	}
    /**
    */
    public function manageimport()
    {
        // Security check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            throw new Zikula_Exception_Forbidden();
        }
			

        // Confirm the forms authorisation key
        //$this->checkCsrfToken();

		$mode = $this->request->getPost()->get('mode', false);
		$import = $this->request->getPost()->get('import', false);		
		if ($mode) {			
		$to_import[$mode] = $import[$mode];
		$imported = ModUtil::apiFunc('Mediasharex', 'import', 'import',$to_import);					
		}else{			
        // the module configuration has been updated successfuly
        $this->registerStatus($this->__('Nothing to import.'));			
		}		
				
        // Assign all the module vars
        return $this->view->assign('mode',$mode)
						  ->assign('imported',$imported)
        				  ->fetch('admin/import_status.tpl');
    }	
	
	

}